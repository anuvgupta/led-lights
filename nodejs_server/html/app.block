    *

// lights control blockfile

// define custom blocks
!break
    init
        {
            return Block('span').add('br');
        }
    load
        {
            data('val', function (val) {
                for (var i = 1; i < val; i++)
                    block.add('br');
            });
        }
!text
    init
        {
            return Block('span');
        }
    load
        {
            data('val', function (val) {
                block.node().appendChild(document.createTextNode(val));
            });
            data('html', function (html) {
                block.html(html);
            });
        }
!image
    init
        {
            return Block('div');
        }
    load
        {
            var src = data('src');
            var height = data('height');
            var width = data('width');
            var alt = data('alt');
            if (src != null) {
                block.css('background-image', "url('" + src + "')")
                    .css('background-repeat', 'no-repeat')
                    .css('background-size', 'contain')
                ;
            }
            if (height !== null) block.css('height', height);
            if (width !== null) block.css('width', width);
            if (alt !== null) block.attribute('title', alt);
        }

!switch
    init
        {
            var block;
            block = Block('div')
                .key('state', false)
                .css({
                    width: 'auto',
                    height: '30px',
                    cursor: 'pointer',
                    margin: '5px 10px',
                    fontSize: '17px'
                })
                .add(Block('block', 'label')
                    .css({
                        display: 'inline-table',
                        width: 'auto',
                        minWidth: '70px',
                        float: 'left',
                        marginRight: '10px',
                        cursor: 'inherit',
                        fontSize: 'inherit'
                    })
                    .__child('content')
                        .css('text-align', 'left')
                        .__parent()
                    .add(Block('text', 1)
                        .data('Label 1: ')
                    )
                    .on('click', function (e, b, d) {
                        if (block.key('enabled')) {
                            block.key('state', (!block.key('state')));
                            block.on('modified');
                        }
                    })
                )
                .add(Block('div', 'main')
                    .css({
                        width: '65px',
                        height: '100%',
                        position: 'relative',
                        cursor: 'inherit',
                        display: 'inline-block'
                    })
                    .add(Block('div', 'bg')
                        .css({
                            width: '100%',
                            height: '100%',
                            borderRadius: '16px',
                            backgroundColor: '#e4e4e4',
                            position: 'absolute',
                            top: '0',
                            left: '0',
                            zIndex: '1',
                            transition: 'background-color 0.2s ease-in-out'
                        })
                    )
                    .add(Block('block', 'circle')
                        .css({
                            width: '30px',
                            height: '100%',
                            position: 'absolute',
                            top: '0.5px',
                            left: '1px',
                            zIndex: '2',
                            transition: 'left 0.2s ease-in-out'
                        })
                        .add(Block('div')
                            .css({
                                width: '75%',
                                height: '75%',
                                borderRadius: '100%',
                                backgroundColor: 'white',
                                margin: '0 auto'
                            })
                        )
                    )
                    .on('click', function (e, b, d) {
                        if (block.key('enabled')) {
                            block.key('state', (!block.key('state')));
                            block.on('modified');
                        }
                    })
                )
                .on('updateUI', function (e, b, d) {
                    if (block.key('state')) {
                        block.child('main/circle').css({
                            left: '34px'
                        }).sibling('bg').css({
                            backgroundColor: '#558fed'
                        });
                    } else {
                        block.child('main/circle').css({
                            left: '1px',
                        }).sibling('bg').css({
                            backgroundColor: '#e4e4e4'
                        });
                    }
                })
                .on('modified', function (e, b, d) {
                    block.on('updateUI');
                })
                .key('enabled', true)
                .on('enable', function (e, b, d) {
                    block.key('enabled', true);
                    block.css({
                        opacity: '1',
                        cursor: 'pointer'
                    });
                    e.stopPropagation();
                })
                .on('disable', function (e, b, d) {
                    block.key('enabled', false);
                    block.css({
                        opacity: '0.6',
                        cursor: 'default'
                    });
                    e.stopPropagation();
                })
            ;
            return block;
        }
    load
        {
            data('val', function (val) {
                var v = (val == 'on');
                if (block.key('state') != v) {
                    block.key('state', v);
                    block.on('modified', { locked: true });
                }
            });
            data('label', function (label) {
                block.child('label/text').html('').data(label);
            });
        }

!selector-menu
    init
        {
            var block = Block();
            block
                .key('visible', false)
                .css({
                    "position": "relative",
                    "width": "105px",
                    "height": "40px",
                    "border": "1px solid #e8e8e8",
                    "padding": "0 40px 0 10px",
                    "border-radius": "4px",
                    "cursor": "pointer",
                    "box-sizing": "border-box"
                })
                .__child('content')
                    .__add(Block('div', 'options')
                        .css({
                            "position": "absolute",
                            "width": "101%",
                            "min-height": "50px",
                            "bottom": "35px",
                            "left": "-1px",
                            "background-color": "white",
                            "border": "1px solid #eee",
                            "border-radius": "5px 5px 5px 0",
                            "cursor": "default",
                            "box-shadow": "rgba(210, 210, 210, 0.3) 0px 2px 4px",
                            "z-index": "10",
                            "display": "none",
                            "opacity": "0",
                            "transition": "opacity 0.15s ease"
                        })
                        .on('show', function (e, b, d) {
                            b.css('display', 'block');
                            setTimeout(function () {
                                b.css('opacity', '1');
                            }, 10);
                        })
                        .on('hide', function (e, b, d) {
                            b.css('opacity', '0');
                            setTimeout(function () {
                                b.css('display', 'none');
                            }, 160);
                        })
                    )
                    .__add(Block('text', 1)
                        .data('...')
                        .css({
                            "color" : "#333",
                            "letter-spacing": "0.4px",
                            "font-size": "15px"
                        })
                    )
                    .__add(Block('image', 'arrow')
                        .data({
                            src: "img/down_b.png",
                            height: "20px",
                            width: "20px"
                        })
                        .css({
                            "position": "absolute",
                            "right": "4px",
                            "top": "10px",
                            "bottom": "10px",
                            "margin": "auto",
                            "opacity": "0.8",
                            "transition": "transform 0.1s ease",
                            "transform": "rotate(90deg)"
                        })
                        .on('up', function (e, b, d) {
                            b.css('transform', 'rotate(90deg');
                        })
                        .on('down', function (e, b, d) {
                            b.css('transform', 'rotate(180deg');
                        })
                    )
                    .__parent()
                .on('click', function (e, b, d) {
                    if (b.key('visible')) {
                        b.__child('content/options').on('hide');
                        b.__child('content/arrow').on('up');
                        b.key('visible', false);
                    } else {
                        b.__child('content/options').on('show');
                        b.__child('content/arrow').on('down');
                        b.key('visible', true);
                    }
                })
                .setAdd(block.__child("content/options"))
            ;
            return block;
        }
    load
        {
            data('select', function (option) {
                block.__child("content/text").html('').data(option);
            });
        }

// app UI content layer
app
    id app
    css
        opacity 0
        transition opacity 0.4s
        height 100%
        width 100%
        overflow hidden
    :login
        {
            block.child('loginform').css('display', 'table').sibling('controlpanel').css('display', 'none');
        }
    :panel
        {
            block.child('controlpanel').css('display', 'table').sibling('loginform').css('display', 'none');
        }
    block loginform
        div image
            img img
                src img/icon.png
                height 160px
                width 160px
            css
                height 160px
                width 160px
                margin 0 auto
                margin-bottom 0px
        input password
            type password
            placeholder led lights
            css
                padding 4px 1px 6px
                text-align center
                letter-spacing 1px
                outline none
                font-size 15px
                opacity 0.8
                border 0.5px solid #ccc
                border-radius 3px
            :keyup
                {
                    var val = block.$().val().trim();
                    if (val != null && val != '') {
                        app.login(val);
                    }
                }
        div spacer
            css
                width 20%
                margin 0 auto
                height 50px
    block controlpanel
        css
            display none
            position relative
        block mobiledisplay
            css
                position fixed
                left 0
                right 0
                bottom 0
                z-index 100
                display none
                background-color white
                box-sizing border-box
                border-top 65px solid white
            @query window height != 0
                {
                    block.css('height', (window.innerHeight - 65) + 'px');
                }
            // 1150
            @query window width > 1300
                css
                    display none
            @query window width < 1300
                css
                    display table
            div content
                css
                    width 90%
                    max-width 500px
                    margin 0 auto
                    height 70%
                    max-height 500px
                    box-sizing border-box
                    border 20px solid white
                image logo
                    src img/icon_g.png
                    css
                        margin 0 auto
                        width 100%
                        max-width 250px
                    @query window height != 0
                        {
                            block.css('height', (block.$().width()) + 'px');
                        }
                text main
                    val mobile screens not supported
                    css
                        color #555
                        font-size 25px
                        // font-style italic
                break br1
                    // break
                text sub
                    val please use native app, or switch to larger device
                    css
                        color #888
                        font-size 16px
                        font-style italic
        block titlebar
            css
                width 100%
                height 65px
                position absolute
                top 0
                left 0
                background-color #2677ED
                box-shadow rgba(50, 50, 50, 0.4) 0px 2px 4px
                transition background-color 0.3s ease, border 0.3s ease
                z-index 101
            @query window height != 0
                {
                    block.css({
                        backgroundColor: app.colors[app.scheme].navbar['background'],
                        borderBottom: '1px solid ' + app.colors[app.scheme].navbar['border'],
                    });
                }
            text title
                // val Live LEDs
                val Lights
                css
                    font-family ModernSansRegular
                    font-size 30px
                    color #fefefe
                    margin-top 8px
                    text-transform uppercase
                    display block
                    cursor default
            block logout
                css
                    position absolute
                    top 2px
                    right 20px
                    width 50px
                    opacity 0.9
                    transition opacity 0.1s ease
                    cursor pointer
                :mouseover
                    css
                        opacity 1
                :mouseout
                    css
                        opacity 0.9
                :click
                    {
                        app.logout();
                    }
                img icon
                    src img/exit_w.png
                    height 35px
                    width 35px
            block github
                css
                    position absolute
                    top 2px
                    left 20px
                    width 50px
                    opacity 0.9
                    transition opacity 0.1s ease
                    cursor pointer
                :mouseover
                    css
                        opacity 1
                :mouseout
                    css
                        opacity 0.9
                a link
                    target _blank
                    href https://github.com/anuvgupta/led-lights
                    img icon
                        src img/github_w.png
                        height 35px
                        width 35px
        div colors
            css
                width 500px
                top 66px
                right 0
                position absolute
                border-left 1px solid #eee
                text-align left
                font-size 0
            @query window height != 0
                {
                    block.css('height', (window.innerHeight - 65 - 1) + 'px');
                }
            div picker
                #color
                    {
                        var number = block.child('numbers');
                        number.child('redinput').$().val(color.r);
                        number.child('t1R').html(String(parseInt(color.r)));
                        number.child('greeninput').$().val(color.g);
                        number.child('t2R').html(String(parseInt(color.g)));
                        number.child('blueinput').$().val(color.b);
                        number.child('t3R').html(String(parseInt(color.b)));
                        number.child('hexinput').$().val(color.hex);
                    }
                css
                    height 460px
                    border-bottom 1px solid #eee
                button rect
                    css
                        height 250px
                        width 100%
                        outline none
                        cursor pointer
                        border none
                        border-bottom 1px solid #eee
                    class jscolor {valueElement:null,value:'000000',position:'bottom',width:293,height:222,onFineChange:'app.colorPickerUpdate(this)'}
                div numbers
                    css
                        padding 14px 8px 0 16px
                        font-size 17px
                        width 53%
                        float left
                        height 130px
                    div spacer1
                        css
                            height 5px
                    text t1
                        html R
                    input redinput
                        type range
                        min 0
                        max 255
                        value 0
                        css
                            margin 2px 10px 2px 15px
                            padding 0
                            outline none
                            width 205px
                            cursor pointer
                            opacity 0.8
                        :input
                            {
                                var val = parseInt(block.$().val().trim());
                                if (!isNaN(val)) {
                                    if (val < 0) val = 0;
                                    if (val > 255) val = 255;
                                    block.sibling('t1R').html('' + val);
                                    app.rgb.r = val;
                                    var picker = block.parent().sibling('rect').node().jscolor;
                                    picker.fromRGB(app.rgb.r, app.rgb.g, app.rgb.b);
                                    app.colorPickerUpdate(picker);
                                }
                            }
                        :mouseup
                            {
                                block.on('input');
                                app.updateColor(true);
                                if (app.trackLiveUpdates.left || app.trackLiveUpdates.right) app.testColor(true);
                            }
                    text t1R
                        html 0
                    div spacer2
                        css
                            height 5px
                    text t2
                        html G
                    input greeninput
                        type range
                        min 0
                        max 255
                        value 0
                        css
                            margin 2px 10px 2px 15px
                            padding 0
                            outline none
                            width 205px
                            cursor pointer
                            opacity 0.8
                        :input
                            {
                                var val = parseInt(block.$().val().trim());
                                if (!isNaN(val)) {
                                    if (val < 0) val = 0;
                                    if (val > 255) val = 255;
                                    block.sibling('t2R').html('' + val);
                                    app.rgb.g = val;
                                    var picker = block.parent().sibling('rect').node().jscolor;
                                    picker.fromRGB(app.rgb.r, app.rgb.g, app.rgb.b);
                                    app.colorPickerUpdate(picker);
                                }
                            }
                        :mouseup
                            {
                                block.on('input');
                                app.updateColor(true);
                                if (app.trackLiveUpdates.left || app.trackLiveUpdates.right) app.testColor(true);
                            }
                    text t2R
                        html 0
                    div spacer3
                        css
                            height 5px
                    text t3
                        html B
                    input blueinput
                        type range
                        min 0
                        max 255
                        value 0
                        css
                            margin 2px 10px 2px 15px
                            padding 0
                            outline none
                            width 205px
                            cursor pointer
                            opacity 0.8
                        :input
                            {
                                var val = parseInt(block.$().val().trim());
                                if (!isNaN(val)) {
                                    if (val < 0) val = 0;
                                    if (val > 255) val = 255;
                                    block.sibling('t3R').html('' + val);
                                    app.rgb.b = val;
                                    var picker = block.parent().sibling('rect').node().jscolor;
                                    picker.fromRGB(app.rgb.r, app.rgb.g, app.rgb.b);
                                    app.colorPickerUpdate(picker);
                                }
                            }
                        :mouseup
                            {
                                block.on('input');
                                app.updateColor(true);
                                if (app.trackLiveUpdates.left || app.trackLiveUpdates.right) app.testColor(true);
                            }
                    text t3R
                        html 0
                    div spacer4
                        css
                            height 10px
                    text t4
                        html HEX
                    input hexinput
                        type text
                        value #000000
                        css
                            margin 0 0 0 12px
                            padding 2px 5px
                            font-size 15px
                            outline none
                            width 175px
                        :input
                            {
                                var val = block.$().val().trim();
                                if (val.length == 7) {
                                    var picker = block.parent().sibling('rect').node().jscolor;
                                    picker.fromString(val);
                                    app.colorPickerUpdate(picker);
                                    app.updateColor(true);
                                    app.testColor(true);
                                }
                            }
                    div spacer5
                        css
                            height 5px
                div sync
                    css
                        float left
                        height 140px
                        width 195px
                    {
                        block.key('enabled', true);
                    }
                    :enable
                        {
                            block.key('enabled', true);
                            block.child('trackLeft/switch').on('enable');
                            block.child('trackRight/switch').on('enable');
                        }
                    :disable
                        {
                            block.key('enabled', false);
                            block.child('trackLeft/switch').on('disable');
                            block.child('trackRight/switch').on('disable');
                        }
                    #left
                        {
                            block.child('trackLeft/switch').data(left === true || left === 'true' ? 'on' : 'off');
                        }
                    #right
                        {
                            block.child('trackRight/switch').data(right === true || right === 'true' ? 'on' : 'off');
                        }
                    div trackLeft
                        css
                            width 180px
                            display inline-block
                            height auto
                            float left
                            margin-left 10px
                            margin-top 20px
                        switch switch
                            val off
                            label Live Left
                            $first yes
                            :modified
                                {
                                    app.trackLiveUpdates.left = block.key('state') === true;
                                    if (block.key('first') == 'yes') block.key('first', 'no');
                                    else app.util.cookie('trackLeft', "" + app.trackLiveUpdates.left);
                                }
                    div trackRight
                        css
                            width 180px
                            display inline-block
                            height auto
                            float left
                            margin-left 10px
                        switch switch
                            val off
                            label Live Right
                            $first yes
                            :modified
                                {
                                    app.trackLiveUpdates.right = block.key('state') === true;
                                    if (block.key('first') == 'yes') block.key('first', 'no');
                                    else app.util.cookie('trackRight', "" + app.trackLiveUpdates.right);
                                }
                div buttons
                    css
                        margin-top 6px
                        width auto
                        height 40px
                        float left
                        margin-left 17%
                    div button1
                        css
                            float left
                            margin 0 auto
                            padding 8px 0
                            width 150px
                            text-align center
                            border-radius 4px
                            cursor pointer
                            color white
                            transition background-color 0.15s ease, box-shadow 0.15s ease, -moz-box-shadow 0.15s ease, -webkit-box-shadow 0.15s ease
                            border 1px solid #ffffff
                            opacity 0.9
                        @query window height != 0
                            {
                                var inset = 'inset 0px 39px 0px -18px ' + app.colors[app.scheme].button['inset'];
                                block.css({
                                    backgroundColor: app.colors[app.scheme].button['default'],
                                    '-moz-box-shadow': inset, '-webkit-box-shadow': inset, 'box-shadow': inset
                                });
                            }
                        :mouseover, mouseout, mousedown, mouseup
                            {
                                block.css('background-color', app.colors[app.scheme].button[event.type]);
                            }
                        text text
                            val new
                            css
                                font-size 20px
                                letter-spacing 1.5px
                                // text-transform uppercase
                        :click
                            {
                                app.newColor();
                            }
                    div spacer2
                        css
                            float left
                            width 30px
                            height 30px
                    div button2
                        {
                            block.key('enabled', true);
                        }
                        css
                            float left
                            margin 0 auto
                            padding 8px 0
                            width 150px
                            text-align center
                            border-radius 4px
                            cursor default
                            color white
                            transition background-color 0.15s ease, opacity 0.1s ease, box-shadow 0.15s ease, -moz-box-shadow 0.15s ease, -webkit-box-shadow 0.15s ease
                            border 1px solid #ffffff
                            opacity 0.5
                        @query window height != 0
                            {
                                var inset = 'inset 0px 39px 0px -18px ' + app.colors[app.scheme].button['inset'];
                                block.css({
                                    backgroundColor: app.colors[app.scheme].button['default'],
                                    '-moz-box-shadow': inset, '-webkit-box-shadow': inset, 'box-shadow': inset
                                });
                            }
                        :mouseover, mouseout, mousedown, mouseup
                            {
                                if (block.key('enabled'))
                                    block.css('background-color', app.colors[app.scheme].button[event.type]);
                            }
                        :click
                            {
                                if (block.key('enabled')) {
                                    app.deleteColor();
                                }
                            }
                        :enable
                            {
                                block.key('enabled', true);
                                block.css({
                                    'opacity': '0.9',
                                    'cursor': 'pointer'
                                });
                            }
                        :disable
                            {
                                block.key('enabled', false);
                                block.css({
                                    'opacity': '0.5',
                                    'cursor': 'default'
                                });
                            }
                        text text
                            val delete
                            css
                                font-size 20px
                                letter-spacing 1.5px
                                // text-transform uppercase
            !preset
                init
                    {
                        return Block('div')
                            .key('red', 0)
                            .key('green', 0)
                            .key('blue', 0)
                            .key('id', '')
                            .key('name', '')
                            .key('foreground', 'white')
                            .key('selected', false)
                            .key('lastclicked', 0)
                            .css({
                                backgroundColor: 'black',
                                display: 'inline-block',
                                border: '4px solid black',
                                cursor: 'pointer'
                            })
                            .query('window height != 0', function (event, block, data) {
                                var width = block.parent().$().width() / block.parent().key('squaresPerRow') - 8;
                                block.css({
                                    width: width + 'px',
                                    height: (width / 1.8) + 'px'
                                });
                            })
                            .add(Block('block', 'content')
                                .add(Block('text', 1)
                                    .css({
                                        color: 'white',
                                        fontSize: '17px'
                                    })
                                    .data('')
                                )
                            )
                            .on('recolor', function (e, b, d) {
                                var rgb = app.util.rgbcss(b.key('red'), b.key('green'), b.key('blue'));
                                b.css('background-color', rgb);
                                if (!b.key('selected'))
                                    b.css('border', '4px solid ' + rgb)
                                block.on('recolorcontent');
                            })
                            .on('recolorcontent', function (e, b, d) {
                                if (b.key('red') > app.bwThreshold && b.key('green') > app.bwThreshold && b.key('blue') > app.bwThreshold) {
                                    b.key('foreground', 'black');
                                    b.child('content/text').css('color', 'black');
                                } else {
                                    b.key('foreground', 'white');
                                    b.child('content/text').css('color', 'white');
                                }
                            })
                            //.on('mouseover', function (e, b, d) {
                            //    if (!b.key('selected'))
                            //        b.css('border', '4px solid #fff');
                            //})
                            //.on('mouseout', function (e, b, d) {
                            //    if (!b.key('selected')) {
                            //        var rgb = app.util.rgbcss(b.key('red'), b.key('green'), b.key('blue'));
                            //        b.css('border', '4px solid ' + rgb);
                            //    }
                            //})
                            .on('select', function (e, b, d) {
                                var siblings = b.parent().children();
                                for (var s in siblings) {
                                    if (siblings.hasOwnProperty(s)) {
                                        siblings[s].on('deselect');
                                    }
                                }
                                b.key('selected', true);
                                b.css('border', '4px solid ' + b.key('foreground'));
                                app.rgb.r = b.key('red');
                                app.rgb.g = b.key('green');
                                app.rgb.b = b.key('blue');
                                app.rgb.id = b.key('id');
                                if (app.rgb.id.trim().length > 1) {
                                    var picker = b.parent().sibling('picker').child('rect').node().jscolor;
                                    picker.fromRGB(app.rgb.r, app.rgb.g, app.rgb.b);
                                    app.colorPickerUpdate(picker, false);
                                    b.parent().sibling('picker').child('buttons/button2').on('enable');
                                }
                            })
                            .on('deselect', function (e, b, d) {
                                b.key('selected', false);
                                var rgb = app.util.rgbcss(b.key('red'), b.key('green'), b.key('blue'));
                                b.css('border', '4px solid ' + rgb);
                                app.rgb.id = '';
                                b.parent().sibling('picker').child('buttons/button2').on('disable');
                            })
                            .on('click', function (e, b, d) {
                                var doubleClickTimeout = 200;
                                var newclicked = Date.now();
                                var lastclicked = b.key('lastclicked');
                                b.key('lastclicked', newclicked)
                                if (newclicked - lastclicked < doubleClickTimeout) {
                                    if (b.key('selected')) {
                                        b.on('deselect');
                                        if (app.music_settings.enabled) {
                                            setTimeout(function () {
                                                app.playMusic();
                                            }, 100);
                                        }
                                    } else b.on('select');
                                } else {
                                    setTimeout(function () {
                                        if (b.key('lastclicked') == newclicked) {
                                            // no double click occurred
                                            if (app.rgb.id == b.key('id')) {
                                                var newname = prompt('Rename color "' + b.key('name') + '"?', b.key('name'));
                                                if (newname != null && newname.length > 0) {
                                                    app.nameColor(newname);
                                                }
                                            } else {
                                                app.rgb.r = b.key('red');
                                                app.rgb.g = b.key('green');
                                                app.rgb.b = b.key('blue');
                                                var picker = b.parent().sibling('picker').child('rect').node().jscolor;
                                                picker.fromRGB(app.rgb.r, app.rgb.g, app.rgb.b);
                                                app.colorPickerUpdate(picker, app.rgb.id.trim().length > 1 && app.rgb.id.trim() != b.key('id').trim(), true);
                                            }
                                        }
                                    }, doubleClickTimeout + 10);
                                }
                            })
                        ;
                    }
                load
                    {
                        data('r', function (v) {
                            if (v > 255) v = 255;
                            if (v < 0) v = 0;
                            block.key('red', v);
                            block.on('recolor');
                        });
                        data('g', function (v) {
                            if (v > 255) v = 255;
                            if (v < 0) v = 0;
                            block.key('green', v);
                            block.on('recolor');
                        });
                        data('b', function (v) {
                            if (v > 255) v = 255;
                            if (v < 0) v = 0;
                            block.key('blue', v);
                            block.on('recolor');
                        });
                        data('id', function (id) {
                            block.key('id', id);
                        });
                        data('name', function (name) {
                            block.key('name', name);
                            block.child('content/text').html('').data(name);
                            block.on('recolorcontent');
                        });
                        data('sw', function (sw) {
                            if (sw) {
                                block.on('select');
                            }
                        });
                    }
            div presets
                {
                    block.key('squaresPerRow', 4);
                }
                css
                    overflow-y scroll
                    height 425px
                :clear
                    {
                        var children = block.children;
                        for (var c in children) {
                            if (c != 'spacer')
                                block.remove(c);
                        }
                        if (data.callback) data.callback();
                    }
                #newpreset
                    {
                        if (!block.children().hasOwnProperty(newpreset.id)) {
                            block.add(Block('preset', newpreset.id), 'spacer');
                            Block.queries();
                            block.child(newpreset.id).data(newpreset);
                        }
                    }
                #updatepreset
                    {
                        if (block.children().hasOwnProperty(updatepreset.id)) {
                            block.child(updatepreset.id).data({
                                r: updatepreset.r,
                                g: updatepreset.g,
                                b: updatepreset.b,
                                name: updatepreset.name
                            });
                        }
                        if (updatepreset.id == app.rgb.id) {
                            app.rgb.r = updatepreset.r;
                            app.rgb.g = updatepreset.g;
                            app.rgb.b = updatepreset.b;
                            var picker = block.sibling('picker').child('rect').node().jscolor;
                            picker.fromRGB(app.rgb.r, app.rgb.g, app.rgb.b);
                            app.colorPickerUpdate(picker, false);
                        }
                    }
                #deletepreset
                    {
                        if (block.children().hasOwnProperty(deletepreset.id)) {
                            if (deletepreset.id == app.rgb.id) {
                                block.child(deletepreset.id).on('deselect');
                            }
                            block.remove(deletepreset.id);
                        }
                    }
                div spacer
                    css
                        height 0px
                    // @query window height != 0
                    //     {
                    //         var width = block.parent().$().width() / block.parent().key('squaresPerRow');
                    //         block.css('height', (width) + 'px');
                    //     }
        div patterns
            css
                top 66px
                left 0
                position absolute
            @query window height != 0
                {
                    block.css('height', (window.innerHeight - 65 - 1) + 'px');
                    block.css('width', (window.innerWidth - 500 - 1) + 'px');
                }
            :click
                {
                    var colors = block.child('area/editor/colors');
                    var children = colors.children();
                    for (var c in children) {
                        if (children.hasOwnProperty(c) && c != 'addbutton') {
                            if (children[c].key('editcolor')) {
                                children[c].child('colorwrap/color').on('click');
                            }
                        }
                    }
                }
            !menu-item
                init
                    {
                        var block;
                        block = Block('div')
                            .key('name', '')
                            .add(Block('a', 'link')
                                .add(Block('text', 1)
                                    .data('pattern title')
                                    .css({
                                        letterSpacing: '0.2px',
                                        color: '#222'
                                    })
                                )
                            )
                            .css({
                                marginBottom: '2px',
                                cursor: 'pointer'
                            })
                            .on('mouseover', function (e, b, d) {
                                block.child('link/text').css('color', '#555');
                            })
                            .on('mouseout', function (e, b, d) {
                                block.child('link/text').css('color', '#222');
                            })
                            .on('click', function (e, b, d) {
                                app.loadPattern(block.mark(), block.key('name'));
                            })
                        ;
                        return block;
                    }
                load
                    {
                        data('name', function (name) {
                            block.key('name', name).child('link/text').html('').data(name);
                        });
                    }
            :clearlist
                {
                    block.child('menu/list').empty();
                }
            #newpattern
                {
                    block.child('menu/list').add(Block('menu-item', newpattern.id).data({
                        name: newpattern.name
                    }));
                }
            #patternname
                {
                    block.child('menu/list/' + patternname.id).data({ name: patternname.name });
                    if (app.currentPattern.id == patternname.id) {
                        block.child('area/editor').data({ name: patternname.name });
                    }
                }
            #deletepattern
                {
                    block.child('menu/list').remove(deletepattern.id);
                }
            div menu
                css
                    // width 300px
                    width 350px
                    border-right 1px solid #eee
                    position absolute
                    left 0
                    top 0
                    overflow scroll
                @query window height != 0
                    {
                        block.css('height', (block.parent().$().height() - block.sibling('directpanel').$().height()) + 'px');
                    }
                div title
                    css
                        margin-top 10px
                        margin-left 22px
                        text-align left
                        position relative
                        margin-bottom 2px
                    text text
                        val Patterns
                        css
                            font-size 26px
                            letter-spacing 0.5px
                            color #000
                            cursor default
                    div new
                        css
                            position absolute
                            top 7px
                            right 15px
                            opacity 0.6
                            cursor pointer
                            transition opacity 0.2s ease
                        :mouseover
                            css
                                opacity 0.75
                        :mouseout
                            css
                                opacity 0.6
                        image img
                            src img/plus_b.png
                            height 23px
                            width 23px
                        :click
                            {
                                app.newPattern();
                            }
                div list
                    css
                        margin-left 24px
                        text-align left
                        margin-bottom 20px
            !panel-item
                init
                    {
                        var b = Block('div')
                            .css({
                                width: '100%',
                                height: '80px',
                                borderBottom: '1px solid #f2f2f2',
                                boxSizing: 'border-box'
                            })
                            .__add(Block('block', 'icon')
                                .css({
                                    width: '55px',
                                    opacity: '0.6',
                                    marginRight: '5px',
                                    float: 'left',
                                    boxSizing: 'border-box'
                                })
                                .add('image', 'img')
                            )
                            .__add(Block('block', 1)
                                .css({
                                    height: '100%',
                                    float: 'left',
                                    boxSizing: 'border-box'
                                })
                                .query('window height != 0', function (event, block) {
                                    block.css('width', (block.__parent().$().width() - block.__sibling('icon').$().outerWidth(true)) + 'px');
                                })
                                .__child('content').css('textAlign', 'left').__parent()
                            )
                        ;
                        return b.setAdd(b.__child('block/content'));
                    }
                load
                    {
                        data('icon', function (icon) {
                            block.__child('icon').child('img').data({
                                src: 'img/' + icon + '_b.png',
                                height: '23px',
                                width: '23px',
                                css: { margin: '0 auto' }
                            });
                        });
                    }
            div directpanel
                css
                    width 350px
                    height 480px
                    border-top 1px solid #eee
                    position absolute
                    bottom 0
                    left 0
                    border-right 1px solid #eee
                panel-item devices
                    icon memory
                    css
                        position relative
                    {
                        block.key('timeUpdater', "null")
                            .key('deleteRed', 'rgba(237, 69, 61, 1)')
                            .key('buttonBlue', 'rgba(40, 124, 246, 1)')
                            .key('statusGreen', 'rgba(85, 196, 110, 1)')
                            .key('lastTimestamp', 0);
                    }
                    #device_list
                        {
                            var device_blocks = block.child('menu').children();
                            // add new/update existing devices
                            for (var id in device_list) {
                                if (device_list.hasOwnProperty(id)) {
                                    if (device_list[id].hasOwnProperty('last_event') && device_list[id].last_event == "online") {
                                        device_list[id].last_timestamp = "now";
                                    }
                                    if (device_blocks.hasOwnProperty(id)) {
                                        block.child('menu/' + id).data(device_list[id]);
                                    } else {
                                        block.child('menu').add(Block('selector-device', id)
                                            .data(device_list[id])
                                        );
                                    }
                                }
                            }
                            // remove deleted devices
                            for (var id in device_blocks) {
                                if (!device_list.hasOwnProperty(id) && device_blocks.hasOwnProperty(id)) {
                                    device_blocks[id].remove();
                                }
                            }
                            block.on('refresh');
                        }
                    :updatetime
                        {
                            var lTS = block.key('lastTimestamp');
                            var time_string = "";
                            if (lTS == "now") {
                                time_string = "now";
                            } else {
                                lTS = parseInt(lTS);
                                time_string = app.util.duration_desc(lTS);
                            }
                            block.child('menu').__child('content/block/content/status/time').html('').data(time_string);
                            event.stopPropagation();
                        }
                    :refresh
                        {
                            if (app.device_id != null && app.devices.hasOwnProperty(app.device_id)) {
                                var device_data = app.devices[app.device_id];
                                block.key('lastTimestamp', device_data.last_timestamp);
                                if (block.key('timeUpdater') === "null") {
                                    block.key('timeUpdater', setInterval(function () {
                                        block.on('updatetime');
                                    }, 500));
                                }
                                var text = "";
                                var color = block.key('buttonBlue');
                                if (device_data.last_event != "") {
                                    if (device_data.last_event == "disconnected") {
                                        text +=  "Offline";
                                        color = block.key('deleteRed');
                                    } else if (device_data.last_event == "connected") {
                                        text +=  "Syncing";
                                        color = block.key('buttonBlue');
                                    } else if (device_data.last_event == "authenticated") {
                                        text +=  "Syncing";
                                        color = block.key('buttonBlue');
                                    } else if (device_data.last_event == "online") {
                                        text +=  "Online";
                                        color = block.key('statusGreen');
                                    }
                                }
                                block.child('menu').__child('content/placeholder')
                                        .css('display', 'none')
                                    .__sibling('block')
                                        .__child('content')
                                            .__child('name/text')
                                                    .html('').data(device_data.name)
                                                .__sibling('edit')
                                                    .data(block.child('menu').__child('content/block/content/name').key('editing') ? { } : device_data.name)
                                                .__parent(1)
                                            .__child('status/event')
                                                .html(text + '&nbsp;')
                                                .__parent(1)
                                            .__child('indicator')
                                                .child('circle')
                                                    .css('background-color', color)
                                                    .parent()
                                                .__parent()
                                            .__parent()
                                        .css('display', 'table');
                                block.child('edit').css('display', 'table');
                                block.on('updatetime');
                            } else {
                                block.child('menu').__child('content/placeholder')
                                        .css('display', 'table')
                                    .__sibling('block')
                                        .css('display', 'none');
                                block.child('edit').css('display', 'none');
                            }
                        }
                    !selector-device
                        init
                            {
                                var block;
                                block = Block('div')
                                    .key('lastTimestamp', 0)
                                    .key('deleteRed', 'rgba(237, 69, 61, 1)')
                                    .key('buttonBlue', 'rgba(40, 124, 246, 1)')
                                    .key('statusGreen', 'rgba(85, 196, 110, 1)')
                                    .key('timeUpdater', "null")
                                    .css({
                                        width: '100%',
                                        height: '50px',
                                        backgroundColor: 'rgba(255, 255, 255, 0)',
                                        cursor: 'pointer',
                                        borderBottom: '1px solid #fafafa',
                                    })
                                    .add(Block('block', 1)
                                        .css({
                                            position: 'relative'
                                        })
                                        .add(Block('block', 'indicator')
                                            .css({
                                                'height': '100%',
                                                'width': '20px',
                                                'margin': '0',
                                                'margin-top': '1px',
                                                'margin-right': '10px',
                                                'position': 'absolute',
                                                'left': '15px',
                                                'top': '0'
                                            })
                                            .add(Block('div', 'circle')
                                                .css({
                                                    'border-radius': '100%',
                                                    'height': '10px',
                                                    'width': '10px',
                                                    'margin': '0 auto',
                                                    'background-color': 'rgba(20, 20, 20, 0.6)'
                                                })
                                            )
                                        )
                                        .add(Block('div', 'name')
                                            .css({
                                                'float': 'left',
                                                'width': 'auto',
                                                'height': '36%',
                                                'position': 'absolute',
                                                'left': '50px',
                                                'top': '12%'
                                            })
                                            .add(Block('text', 1)
                                                .data('Device Name')
                                                .css({
                                                    'font-size': '18px',
                                                    'margin-bottom': '1px',
                                                    'display': 'block',
                                                    'margin-right': '10px',
                                                    'color': '#222',
                                                    'cursor': 'pointer'
                                                })
                                            )
                                        )
                                        .add(Block('div', 'status')
                                            .css({
                                                'float': 'left',
                                                'width': 'auto',
                                                'height': '48%',
                                                'position': 'absolute',
                                                'left': '50px',
                                                'bottom': '0'
                                            })
                                            .add(Block('text', 'event')
                                                .html('Event&nbsp;')
                                                .css({
                                                    'font-size': '11px',
                                                    'margin-top': '0',
                                                    'display': 'block',
                                                    'float': 'left',
                                                    'color': '#666',
                                                    'cursor': 'pointer',
                                                    'font-style': 'italic'
                                                })
                                            )
                                            .add(Block('text', 'time')
                                                .data('...')
                                                .css({
                                                    'font-size': '11px',
                                                    'margin-top': '0',
                                                    'display': 'block',
                                                    'float': 'left',
                                                    'color': '#666',
                                                    'cursor': 'pointer',
                                                    'font-style': 'italic'
                                                })
                                            )
                                        )
                                        .add(Block('block', 'delete')
                                            .css({
                                                position: 'absolute',
                                                right: '0',
                                                top: '0',
                                                width: '35px'
                                            })
                                            .add(Block('image', 1)
                                                .data({
                                                    src: 'img/x_b.png',
                                                    width: '15px',
                                                    height: '15px',
                                                    css: {
                                                        margin: '0 auto 0 5px',
                                                        opacity: '0.6'
                                                    }
                                                })
                                                .on('mouseover', function (e, b, d) {
                                                    setTimeout(function () {
                                                        block.on('mouseout');
                                                    }, 10);
                                                    b.css('opacity', '0.8');
                                                })
                                                .on('mouseout', function (e, b, d) {
                                                    b.css('opacity', '0.6');
                                                })
                                                .on('click', function (e, b, d) {
                                                    var check = window.confirm("Delete device \"" + block.mark() + "\"?");
                                                    if (check) app.deleteDevice(block.mark());
                                                    e.stopPropagation();
                                                })
                                            )
                                        )
                                        .__child('content')
                                            .css('text-align', 'left')
                                            .__parent()
                                    )
                                    .on('mouseover', function (e, b) {
                                        b.css('background-color', '#f3f3f3');
                                    })
                                    .on('mouseout', function (e, b) {
                                        b.css('background-color', 'rgba(255, 255, 255, 0)');
                                    })
                                    .on('updatetime', function (e, b, d) {
                                        var lTS = b.key('lastTimestamp');
                                        var time_string = "";
                                        if (lTS == "now") {
                                            time_string = "now";
                                        } else {
                                            lTS = parseInt(lTS);
                                            time_string = app.util.duration_desc(lTS);
                                        }
                                        b.child('block/status/time').html('').data(time_string);
                                        e.stopPropagation();
                                    })
                                    .on('click', function (e, b, d) {
                                        app.selectDevice(b.mark());
                                    })
                                ;
                                return block;
                            }
                        load
                            {
                                data('name', function (name) {
                                    block.key('name', name);
                                    block.child('block/name/text').html('').data(name);
                                });
                                data('last_event', function (last_event) {
                                    var text = "";
                                    var color = block.key('buttonBlue');
                                    if (last_event != "") {
                                        if (last_event == "disconnected") {
                                            text +=  "Offline";
                                            color = block.key('deleteRed');
                                        } else if (last_event == "connected") {
                                            text +=  "Syncing";
                                            color = block.key('buttonBlue');
                                        } else if (last_event == "authenticated") {
                                            text +=  "Syncing";
                                            color = block.key('buttonBlue');
                                        } else if (last_event == "online") {
                                            text +=  "Online";
                                            color = block.key('statusGreen');
                                        }
                                        block.child('block/status/event').html(text + '&nbsp;');
                                        block.child('block/indicator/circle').css('background-color', color);
                                    }
                                });
                                data('last_timestamp', function (last_timestamp) {
                                    if (block.key('timeUpdater') === "null") {
                                        block.key('timeUpdater', setInterval(function () {
                                            block.on('updatetime');
                                        }, 500));
                                    }
                                    block.key('lastTimestamp', last_timestamp);
                                    block.on('updatetime');
                                });
                            }
                    selector-menu menu
                        css
                            width 230px
                            height 50px
                            display inline-table
                        {
                            block.__child('content/options').css({
                                bottom: '47px'
                            });
                            block.__child('content')
                                .__remove('text')
                                .__child('arrow')
                                    .css({
                                        right: '8px',
                                        height: '25px',
                                        width: '25px'
                                    })
                                    .__parent()
                                .__add(Block('block', 'placeholder')
                                    .add(Block('text', 1)
                                        .data('Device List')
                                        .css({
                                            fontSize: '18px',
                                            paddingLeft: '8px',
                                            color: '#333'
                                        })
                                    )
                                    .__child('content')
                                        .css('text-align', 'left')
                                        .__parent()
                                )
                                .__add(Block('block', 1)
                                    .css({
                                        position: 'absolute',
                                        top: '0',
                                        left: '0',
                                        display: 'none'
                                    })
                                    .__child('content')
                                        .__add(Block('block', 'indicator')
                                            .css({
                                                'height': '100%',
                                                'width': '20px',
                                                'margin': '0',
                                                'margin-top': '1px',
                                                'margin-right': '10px',
                                                'position': 'absolute',
                                                'left': '15px',
                                                'top': '0'
                                            })
                                            .add(Block('div', 'circle')
                                                .css({
                                                    'border-radius': '100%',
                                                    'height': '10px',
                                                    'width': '10px',
                                                    'margin': '0 auto',
                                                    'background-color': 'rgba(20, 20, 20, 0.6)'
                                                })
                                            )
                                        )
                                        .__add(Block('div', 'name')
                                            .key('editing', false)
                                            .css({
                                                'float': 'left',
                                                'width': 'auto',
                                                'height': '36%',
                                                'position': 'absolute',
                                                'left': '50px',
                                                'top': '12%'
                                            })
                                            .__add(Block('text', 1)
                                                .data('Device Name')
                                                .css({
                                                    'font-size': '18px',
                                                    'margin-bottom': '1px',
                                                    'display': 'block',
                                                    'margin-right': '10px',
                                                    'color': '#222',
                                                    'cursor': 'pointer'
                                                })
                                            )
                                            .__add(Block('input', 'edit')
                                                .data({
                                                    type: 'text',
                                                    placeholder: 'Device Name',
                                                    css: {
                                                        'font-size': '18px',
                                                        'margin-top': '-1px',
                                                        'display': 'none',
                                                        'margin-right': '10px',
                                                        'width': 'auto',
                                                        'margin-left': '-1px',
                                                        'border': 'none',
                                                        'outline': 'none',
                                                        'color': '#222'
                                                    }
                                                })
                                                .bind('val', function (val, b) {
                                                    b.$().val(val);
                                                })
                                                .on('keyup', function (e, b) {
                                                    if (e.keyCode && e.keyCode == 13) {
                                                        var val = b.$().val();
                                                        if (val != null && val.trim() != "") {
                                                            b.__parent().key('editing', false);
                                                            var new_name = b.$().val();
                                                            if (new_name != null && new_name.trim() != "") {
                                                                app.nameDevice(app.device_id, new_name);
                                                            }
                                                            b.css('display', 'none')
                                                                .__sibling('text').css('display', 'block');
                                                        }
                                                    }
                                                })
                                            )
                                        )
                                        .__add(Block('div', 'status')
                                            .css({
                                                'float': 'left',
                                                'width': 'auto',
                                                'height': '46%',
                                                'position': 'absolute',
                                                'left': '50px',
                                                'bottom': '0'
                                            })
                                            .__add(Block('text', 'event')
                                                .html('Event&nbsp;')
                                                .css({
                                                    'font-size': '11px',
                                                    'margin-top': '0',
                                                    'display': 'block',
                                                    'float': 'left',
                                                    'color': '#666',
                                                    'cursor': 'pointer',
                                                    'font-style': 'italic'
                                                })
                                            )
                                            .__add(Block('text', 'time')
                                                .data('...')
                                                .css({
                                                    'font-size': '11px',
                                                    'margin-top': '0',
                                                    'display': 'block',
                                                    'float': 'left',
                                                    'color': '#666',
                                                    'cursor': 'pointer',
                                                    'font-style': 'italic'
                                                })
                                            )
                                        )
                                    .__parent()
                                )    
                            ;
                        }
                    block edit
                        css
                            width 30px
                            position absolute
                            top 0
                            bottom 0
                            right 10px
                            opacity 0.7
                        image img
                            src img/edit_b.png
                            height 25px
                            width 25px
                            css
                                cursor pointer
                            :click
                                {
                                    if (app.device_id != null && app.devices.hasOwnProperty(app.device_id)) {
                                        // var new_name = window.prompt("Rename device \"" + app.devices[app.device_id].name + "\"", app.devices[app.device_id].name);
                                        // if (new_name != null && new_name.trim() != "") {
                                        //     app.nameDevice(app.device_id, new_name);
                                        // }
                                        block.parent().sibling('menu').__child('content/block/content/name')
                                            .key('editing', true)
                                            .__child('text')
                                                .css('display', 'none')
                                            .__sibling('edit')
                                                .css('display', 'block')
                                                .$().focus();
                                    }
                                }
                        :mouseover
                            css
                                opacity 0.6
                        :mouseout
                            css
                                opacity 0.7
                panel-item current
                    icon play
                    :hidechildren
                        {
                            var children = block.children();
                            for (var c in children) {
                                if (children.hasOwnProperty(c) && children[c].block) {
                                    children[c].css('display', 'none');
                                }
                            }
                        }
                    #current
                        {
                            block.on('hidechildren');
                            if (current.type == 'hue' || current.type == 'music') {
                                var colorLeft = current.data.left;
                                var colorRight = current.data.right;
                                block.child('hue/color/views')
                                    .child('viewL')
                                        .css('background-color', app.util.rgbcss(colorLeft.r, colorLeft.g, colorLeft.b))
                                    .sibling('viewR')
                                        .css('background-color', app.util.rgbcss(colorRight.r, colorRight.g, colorRight.b))
                                ;
                                block.child('hue').css('display', 'block');
                                if (current.type == 'hue')
                                    block.child('hue/label/text').html('').data('Hue');
                                else if (current.type == 'music')
                                    block.child('hue/label/text').html('').data('Audio');
                            } else if (current.type == 'pattern') {
                                block.child('pattern/text').html('').data(current.data.name);
                                block.child('pattern').css('display', 'block');
                            } else if (current.type == 'none') {
                                block.child('pattern/text').html('<span style="font-size:17px;font-style:italic;font-color:#333;">None</span>');
                                block.child('pattern').css('display', 'block');
                            } else if (current.type == 'no_device') {
                                block.child('pattern/text').html('<span style="font-size:17px;font-style:italic;font-color:#333;">No device</span>');
                                block.child('pattern').css('display', 'block');
                            }
                        }
                    div hue
                        css
                            display none
                            height 100%
                            width 100%
                        block label
                            css
                                width auto
                                margin-right 10px
                                margin-left 5px
                                float left
                            text text
                                val Hue
                                css
                                    font-size 18px
                                    letter-spacing 0.5px
                                    color #222
                        block color
                            css
                                width 50%
                                max-width 150px
                                float left
                                margin-left 0.5px
                            div views
                                css
                                    width 100%
                                    height 50%
                                div viewL
                                    css
                                        width 50%
                                        height 100%
                                        border-radius 6px 0 0 6px
                                        border 1px solid #eee
                                        margin-top 2px
                                        float left
                                        box-sizing border-box
                                div viewR
                                    css
                                        width 50%
                                        height 100%
                                        border-radius 0 6px 6px 0
                                        border 1px solid #eee
                                        margin-top 2px
                                        float left
                                        box-sizing border-box
                                        border-left none
                    div pattern
                        css
                            display none
                        text text
                            val Pattern Name
                            css
                                font-size 22px
                                color #444
                    div music
                        css
                            display none
                        text text
                            val Audio Reactive
                            css
                                font-size 16px
                                letter-spacing 0.55px
                                color #222
                panel-item brightness
                    icon sun
                    #update
                        {
                            block.child('brightslider/slider/input').$().val(update);
                            block.child('brightslider/value/text').html('').data("" + update);
                        }
                    :enable
                        {
                            block.child('brightslider/slider/input').css({
                                'opacity': '0.8',
                                'cursor': 'pointer'
                            }).node().disabled = false;
                        }
                    :disable
                        {
                            block.child('brightslider/slider/input').css({
                                'opacity': '0.5',
                                'cursor': 'default'
                            }).node().disabled = true;
                        }
                    div brightslider
                        css
                            width 100%
                            height 40px
                        block slider
                            css
                                float left
                                margin 0 20px 0 5px
                            @query window height != 0
                                {
                                    block.css('width', (block.parent().$().width() - 40 - 20 - 20) + 'px');
                                }
                            input input
                                type range
                                min 0
                                max 100
                                value 100
                                css
                                    width 100%
                                    margin-top 7px
                                    cursor pointer
                                    opacity 0.8
                                :input
                                    {
                                        var val = parseInt(block.$().val().trim());
                                        if (!isNaN(val)) {
                                            if (val < 0) val = 0;
                                            if (val > 100) val = 100;
                                            block.parent().sibling('value').child('text').html('' + val);
                                            app.direct.brightness = val;
                                            app.sendBrightness(data.latent ? true : false);
                                        }
                                    }
                                :mouseup
                                    {
                                        block.on('input', { latent: true });
                                        app.playCurrent();
                                    }
                        block value
                            css
                                width 40px
                                font-size 19px
                                float left
                            {
                                block.__child('content').css('text-align', 'left');
                            }
                            text text
                                val 100
                                css
                                    color #333
                panel-item speed
                    icon clock
                    #update
                        {
                            block.child('speedslider/slider/input').$().val(update);
                            block.child('speedslider/value/text').html('').data("" + update);
                        }
                    :enable
                        {
                            block.child('speedslider/slider/input').css({
                                'opacity': '0.8',
                                'cursor': 'pointer'
                            }).node().disabled = false;
                        }
                    :disable
                        {
                            block.child('speedslider/slider/input').css({
                                'opacity': '0.5',
                                'cursor': 'default'
                            }).node().disabled = true;
                        }
                    div speedslider
                        css
                            width 100%
                            height 40px
                        block slider
                            css
                                float left
                                margin 0 20px 0 5px
                            @query window height != 0
                                {
                                    block.css('width', (block.parent().$().width() - 40 - 20 - 20) + 'px');
                                }
                            input input
                                type range
                                min 0
                                max 500
                                value 100
                                step 5
                                css
                                    width 100%
                                    margin-top 7px
                                    cursor pointer
                                    opacity 0.8
                                :input
                                    {
                                        var val = parseInt(block.$().val().trim());
                                        if (!isNaN(val)) {
                                            if (val < 0) val = 0;
                                            if (val > 500) val = 500;
                                            block.parent().sibling('value').child('text').html('' + val);
                                            app.direct.speed = val;
                                            app.sendSpeed(data.latent ? true : false);
                                        }
                                    }
                                :mouseup
                                    {
                                        block.on('input', { latent: true });
                                        app.playCurrent();
                                    }
                        block value
                            css
                                width 40px
                                font-size 19px
                                float left
                            {
                                block.__child('content').css('text-align', 'left');
                            }
                            text text
                                val 100
                                css
                                    color #333
                panel-item music
                    icon speaker
                    :enable
                        {
                            block.child('musictoggle/button').on('enable');
                        }
                    :disable
                        {
                            block.child('musictoggle/button').on('disable');
                        }
                    block musictoggle
                        css
                            width auto
                        block button
                            css
                                margin 0
                                padding 6px 20px
                                width auto
                                height 35px
                                text-align center
                                border-radius 4px
                                cursor pointer
                                color white
                                transition background-color 0.15s ease, box-shadow 0.15s ease, -moz-box-shadow 0.15s ease, -webkit-box-shadow 0.15s ease
                                border 1px solid #ffffff
                                opacity 0.9
                                display inline-table
                                float left
                            {
                                block.key('enabled', true);
                            }
                            :enable
                                {
                                    block.key('enabled', true);
                                    block.css({
                                        cursor: 'pointer',
                                        opacity: '0.9'
                                    });
                                    event.stopPropagation();
                                }
                            :disable
                                {
                                    block.key('enabled', false);
                                    block.css({
                                        cursor: 'default',
                                        opacity: '0.5'
                                    });
                                    event.stopPropagation();
                                }
                            @query window height != 0
                                {
                                    var inset = 'inset 0px 39px 0px -18px ' + app.colors[app.scheme].button['inset'];
                                    block.css({
                                        backgroundColor: app.colors[app.scheme].button['default'],
                                        '-moz-box-shadow': inset, '-webkit-box-shadow': inset, 'box-shadow': inset
                                    });
                                }
                            :mouseover, mouseout, mousedown, mouseup
                                {
                                    if (block.key('enabled')) block.css('background-color', app.colors[app.scheme].button[event.type]);
                                }
                            text text
                                val audio react
                                css
                                    font-size 22px
                                    letter-spacing 1.5px
                                    // text-transform uppercase
                                    cursor inherit
                            :click
                                {
                                    if (block.key('enabled')) {
                                        app.block.child('controlpanel/patterns/area/music').on('show');
                                    }
                                }
                        block betalabel
                            css
                                height 35px
                                width auto
                                display inline-table
                                padding 6px 10px
                                margin-left 6px
                                float left
                            text text
                                val Beta Feature
                                css
                                    color #555
                                    font-size 15px
                panel-item scheme
                    icon palette
                    !selector-scheme
                        init
                            {
                                return Block('div')
                                    .css({
                                        width: '100%',
                                        height: '40px',
                                        backgroundColor: 'rgba(255, 255, 255, 0)',
                                        cursor: 'pointer'
                                    })
                                    .add(Block('block', 1)
                                        .add(Block('text', 1)
                                            .data('title')
                                            .css({
                                                fontSize: '15px',
                                                paddingLeft: '15px',
                                                color: '#333',
                                                letterSpacing: '0.4px'
                                            })
                                        )
                                        .__child('content')
                                            .css('text-align', 'left')
                                            .__parent()
                                    )
                                    .on('mouseover', function (e, b) {
                                        b.css('background-color', '#f3f3f3');
                                    })
                                    .on('mouseout', function (e, b) {
                                        b.css('background-color', 'rgba(255, 255, 255, 0)');
                                    })
                                    .on('click', function (e, b, d) {
                                        app.setScheme(b.key('name'));
                                    })
                                ;
                            }
                        load
                            {
                                data('name', function (name) {
                                    block.key('name', name);
                                    block.child('block/text').html('').data(app.util.capitalize(name));
                                });
                            }
                    selector-menu selector
                        css
                            padding 0 37px 0 13px
                        {
                            block.data({ select: 'Schemes' });
                            for (var color in app.colors) {
                                if (app.colors.hasOwnProperty(color)) {
                                    block.add(Block('selector-scheme', color)
                                        .data({ name: color })
                                    );
                                }
                            }
                        }
                    #select
                        {
                            var option = app.util.capitalize(select);
                            block.child('selector').data({ select: option });
                        }
            div area
                css
                    height 100%
                    position absolute
                    left 351px
                    top 0
                @query window height != 0
                    {
                        block.css('width', (window.innerWidth - 500 - 1 - 350 - 1) + 'px');
                    }
                block placeholder
                    css
                        display table
                    :show
                        {
                            var siblings = block.parent().children();
                            for (var s in siblings) {
                                if (s != block.mark()) siblings[s].css('display', 'none');
                            }
                            block.css('display', 'table');
                        }
                    image icon
                        src img/icon_g.png
                        height 270px
                        width 270px
                        css
                            margin 0 auto 50px
                            opacity 0.85
                    //text icon
                    //    val { ... }
                    //    css
                    //        font-size 160px
                    //        color #888
                    //        letter-spacing 1px
                    //        display block
                    //        margin-bottom 5px
                    //        cursor default
                    text desc
                        val create or edit pattern
                        css
                            font-size 25px
                            color #666
                            letter-spacing 1px
                            display block
                            margin-bottom 35px
                            cursor default
                            display none
                div music
                    css
                        display none
                        position absolute
                        top 0
                        left 0
                        width 100%
                        height 100%
                    :show
                        {
                            var siblings = block.parent().children();
                            for (var s in siblings) {
                                if (s != block.mark()) siblings[s].css('display', 'none');
                            }
                            block.css('display', 'block');
                            Block.queries();
                        }
                    block enable
                        $templock unlock
                        :on
                            {
                                var sw = block.child('switch_wrap/switch');
                                if (!sw.key('state')) sw.data('on');
                                event.stopPropagation();
                            }
                        :off
                            {
                                var sw = block.child('switch_wrap/switch');
                                if (sw.key('state')) sw.data('off');
                                event.stopPropagation();
                            }
                        css
                            height 90px
                            //margin-top 40px
                            margin-top 0
                            margin-bottom 10px
                            background-color #f8f8f8
                            border-bottom 1px solid #f9f9f9
                        div switch_wrap
                            css
                                height 35px
                                width 250px
                                margin 0 auto
                            switch switch
                                val off
                                label Audio Reactive
                                css
                                    font-size 22px
                                    color #222
                                :modified
                                    {
                                        if (block.parent()) {
                                            if (block.parent(1).key('templock') == 'lock') 
                                                block.parent(1).key('templock', 'unlock');   
                                            else {
                                                data.locked = data.hasOwnProperty('locked') && (data.locked ? true : false);
                                                if (!data.locked) {
                                                    if (block.key('state'))
                                                        app.playMusic();
                                                    else app.playNone();
                                                }
                                            }
                                        }
                                    }
                    block smoothing
                        css
                            height 60px
                            padding-left 30px
                            box-sizing border-box
                            //border-top 1px solid #fafafa
                            //border-bottom 1px solid #fafafa
                        #val
                            {
                                block.child('wrap/input').$().val(val);
                                block.child('wrap/value/text').html('').data(val);
                            }
                        div wrap
                            css
                                height 30px
                                width auto
                            block label
                                css
                                    width auto
                                    height 30px
                                    float left
                                    margin-right 20px
                                text text
                                    val Smoothing
                                    css
                                        font-size 18px
                            input input
                                type range
                                min 0
                                max 99
                                value 95
                                css
                                    display block
                                    float left
                                    height 30px
                                    margin 0
                                    cursor pointer
                                    opacity 0.8
                                @query window width != 0
                                    {
                                        block.css('width', (block.parent().$().width() - 30 - block.sibling('label').$().width() - 70) + 'px');
                                    }
                                :input
                                    {
                                        var val = parseInt(block.$().val().trim());
                                        if (!isNaN(val)) {
                                            if (val < 0) val = 0;
                                            if (val > 99) val = 99;
                                            block.sibling('value').child('text').html('' + val);
                                            app.music_settings.smoothing = val;
                                            app.sendSmoothing(data.latent ? true : false);
                                        }
                                    }
                                :mouseup
                                    {
                                        block.on('input', { latent: true });
                                        if (app.music_settings.enabled) {
                                            setTimeout(function () {
                                                app.playMusic();
                                            }, 75);
                                        }
                                    }
                            block value
                                css
                                    width 30px
                                    height 30px
                                    float left
                                    margin-left 20px
                                text text
                                    val 95
                                    css
                                        font-size 18px
                    block noise_gate
                        css
                            height 60px
                            padding-left 30px
                            box-sizing border-box
                            //border-bottom 1px solid #fafafa
                        #val
                            {
                                block.child('wrap/input').$().val(val);
                                block.child('wrap/value/text').html('').data(val);
                            }
                        div wrap
                            css
                                height 30px
                                width auto
                            block label
                                css
                                    width auto
                                    height 30px
                                    float left
                                    margin-right 20px
                                text text
                                    val Noise Gate
                                    css
                                        font-size 18px
                            input input
                                type range
                                min 0
                                max 50
                                value 15
                                css
                                    display block
                                    float left
                                    height 30px
                                    margin 0
                                    cursor pointer
                                    opacity 0.8
                                @query window width != 0
                                    {
                                        block.css('width', (block.parent().$().width() - 30 - block.sibling('label').$().width() - 70) + 'px');
                                    }
                                :input
                                    {
                                        var val = parseInt(block.$().val().trim());
                                        if (!isNaN(val)) {
                                            if (val < 0) val = 0;
                                            if (val > 50) val = 50;
                                            block.sibling('value').child('text').html('' + val);
                                            app.music_settings.noise_gate = val;
                                            app.sendNoiseGate(data.latent ? true : false);
                                        }
                                    }
                                :mouseup
                                    {
                                        block.on('input', { latent: true });
                                        if (app.music_settings.enabled) {
                                            setTimeout(function () {
                                                app.playMusic();
                                            }, 75);
                                        }
                                    }
                            block value
                                css
                                    width 30px
                                    height 30px
                                    float left
                                    margin-left 20px
                                text text
                                    val 15
                                    css
                                        font-size 18px
                    !selector-channel
                        init
                            {
                                return Block('div')
                                    .css({
                                        width: '100%',
                                        height: '30px',
                                        backgroundColor: 'rgba(255, 255, 255, 0)',
                                        cursor: 'pointer',
                                        borderBottom: '1px solid #f8f8f8'
                                    })
                                    .add(Block('block', 1)
                                        .add(Block('text', 1)
                                            .data('title')
                                            .css({
                                                fontSize: '15px',
                                                // paddingLeft: '25px',
                                                color: '#333',
                                                letterSpacing: '0.4px'
                                            })
                                        )
                                    )
                                    .on('mouseover', function (e, b) {
                                        b.css('background-color', '#f3f3f3');
                                    })
                                    .on('mouseout', function (e, b) {
                                        b.css('background-color', 'rgba(255, 255, 255, 0)');
                                    })
                                    .on('click', function (e, b, d) {
                                        if (b.key('side') == 'left') {
                                            app.music_settings.l_ch = parseInt(b.key('num')) - 1;
                                            app.sendLeftChannel();
                                        } else if (b.key('side') == 'right') {
                                            app.music_settings.r_ch = parseInt(b.key('num')) - 1;
                                            app.sendRightChannel();
                                        }
                                        if (app.music_settings.enabled) {
                                            setTimeout(function () {
                                                app.playMusic();
                                            }, 75);
                                        }
                                    })
                                ;
                            }
                        load
                            {
                                data('num', function (num) {
                                    block.key('num', num);
                                    block.child('block/text').html('').data(num);
                                });
                                data('side', function (side) {
                                    block.key('side', side);
                                });
                            }
                    block left-bar
                        css
                            height 60px
                            margin-top 20px
                            margin-bottom 10px
                            background-color #fafafa
                            box-sizing border-box
                        div wrap
                            css
                                height 50px
                                width auto
                            block title
                                css
                                    width auto
                                    margin 0 auto
                                text text
                                    html left &nbsp;
                                    css
                                        text-transform uppercase
                                        font-size 20px
                                        color #222
                                        letter-spacing 1px
                    block left-channel
                        css
                            height 50px
                            padding-left 80px
                            box-sizing border-box
                        block ch-lbl
                            css
                                width auto
                                float left
                                margin-right 20px
                            text text
                                val Channel
                                css
                                    font-size 16px
                        block ch-selector
                            css
                                width auto
                                float left
                            selector-menu selector
                                css
                                    background-color white
                                    width 40px
                                    height 35px
                                    padding 0 37px 0 13px
                                {
                                    block.data({ select: '1' });
                                    for (var i = 1; i < 8; i++) {
                                        var num = "" + i;
                                        if (i == 0) num += " (bass)";
                                        block.add(Block('selector-channel', 'ch-' + i)
                                            .data({
                                                num: num,
                                                side: 'left'
                                            })
                                        );
                                    }
                                }
                            #select
                                {
                                    block.child('selector').data({ select: select + 1 });
                                }
                        div spacer
                            css
                                width 30px
                                height 100%
                                float left
                        block i-sw
                            css
                                width auto
                                float left
                            switch switch
                                label Invert
                                val on
                                css
                                    font-size 16px
                                {
                                    block.child('label').css({
                                        'min-width': '20px',
                                        'margin-right': '15px'
                                    });
                                }
                                :modified
                                    {
                                        data.locked = data.hasOwnProperty('locked') && (data.locked ? true : false);
                                        if (!data.locked) {
                                            app.music_settings.l_invert = block.key('state');
                                            app.sendLeftInvert(app.music_settings.l_invert);
                                            if (app.music_settings.enabled) {
                                                setTimeout(function () {
                                                    app.playMusic();
                                                }, 75);
                                            }
                                        }
                                    }
                    block left-preamp
                        css
                            height 50px
                            padding-left 80px
                            padding-right 35px
                            box-sizing border-box
                            //border-bottom 1px solid #fafafa
                        #val
                            {
                                block.child('wrap/input').$().val(val);
                                block.child('wrap/value/text').html('').data("" + parseInt(val));
                            }
                        div wrap
                            css
                                height 30px
                                width auto
                            block label
                                css
                                    width auto
                                    height 30px
                                    float left
                                    margin-right 20px
                                text text
                                    val Pre-Amp
                                    css
                                        font-size 16px
                            input input
                                type range
                                min 20
                                max 200
                                value 100
                                css
                                    display block
                                    float left
                                    height 30px
                                    margin 0
                                    cursor pointer
                                    opacity 0.8
                                @query window width != 0
                                    {
                                        block.css('width', (block.parent().$().width() - 30 - block.sibling('label').$().width() - 70) + 'px');
                                    }
                                :input
                                    {
                                        var val = parseInt(block.$().val().trim());
                                        if (!isNaN(val)) {
                                            if (val < 1) val = 1;
                                            if (val > 200) val = 200;
                                            block.sibling('value').child('text').html('' + val);
                                            app.music_settings.l_preamp = val;
                                            app.sendLeftPreamp(data.latent ? true : false);
                                        }
                                    }
                                :mouseup
                                    {
                                        block.on('input', { latent: true });
                                        if (app.music_settings.enabled) {
                                            setTimeout(function () {
                                                app.playMusic();
                                            }, 75);
                                        }
                                    }
                            block value
                                css
                                    width 30px
                                    height 30px
                                    float left
                                    margin-left 20px
                                text text
                                    val 1
                                    css
                                        font-size 18px
                    block left-postamp
                        css
                            height 50px
                            padding-left 80px
                            padding-right 35px
                            box-sizing border-box
                            //border-bottom 1px solid #fafafa
                        #val
                            {
                                block.child('wrap/input').$().val(val);
                                block.child('wrap/value/text').html('').data(val);
                            }
                        div wrap
                            css
                                height 30px
                                width auto
                            block label
                                css
                                    width auto
                                    height 30px
                                    float left
                                    margin-right 20px
                                text text
                                    val Post-Amp
                                    css
                                        font-size 16px
                            input input
                                type range
                                min 1
                                max 10
                                value 1
                                css
                                    display block
                                    float left
                                    height 30px
                                    margin 0
                                    cursor pointer
                                    opacity 0.8
                                @query window width != 0
                                    {
                                        block.css('width', (block.parent().$().width() - 30 - block.sibling('label').$().width() - 70) + 'px');
                                    }
                                :input
                                    {
                                        var val = parseInt(block.$().val().trim());
                                        if (!isNaN(val)) {
                                            if (val < 1) val = 1;
                                            if (val > 20) val = 20;
                                            block.sibling('value').child('text').html('' + val);
                                            app.music_settings.l_postamp = val;
                                            app.sendLeftPostamp(data.latent ? true : false);
                                        }
                                    }
                                :mouseup
                                    {
                                        block.on('input', { latent: true });
                                        if (app.music_settings.enabled) {
                                            setTimeout(function () {
                                                app.playMusic();
                                            }, 75);
                                        }
                                    }
                            block value
                                css
                                    width 30px
                                    height 30px
                                    float left
                                    margin-left 20px
                                text text
                                    val 1
                                    css
                                        font-size 18px
                    block right-bar
                        css
                            height 60px
                            margin-top 20px
                            margin-bottom 10px
                            background-color #fafafa
                            box-sizing border-box
                        div wrap
                            css
                                height 50px
                                width auto
                            block title
                                css
                                    width auto
                                    margin 0 auto
                                text text
                                    html right &nbsp;
                                    css
                                        text-transform uppercase
                                        font-size 20px
                                        color #222
                                        letter-spacing 1px
                    block right-channel
                        css
                            height 50px
                            padding-left 80px
                            box-sizing border-box
                        block ch-lbl
                            css
                                width auto
                                float left
                                margin-right 20px
                            text text
                                val Channel
                                css
                                    font-size 16px
                        block ch-selector
                            css
                                width auto
                                float left
                            selector-menu selector
                                css
                                    background-color white
                                    width 40px
                                    height 35px
                                    padding 0 37px 0 13px
                                {
                                    block.data({ select: '1' });
                                    for (var i = 1; i < 8; i++) {
                                        var num = "" + i;
                                        if (i == 0) num += " (bass)";
                                        block.add(Block('selector-channel', 'ch-' + i)
                                            .data({
                                                num: num,
                                                side: 'right'
                                            })
                                        );
                                    }
                                }
                            #select
                                {
                                    block.child('selector').data({ select: select + 1 });
                                }
                        div spacer
                            css
                                width 30px
                                height 100%
                                float left
                        block i-sw
                            css
                                width auto
                                float left
                            switch switch
                                label Invert
                                val on
                                css
                                    font-size 16px
                                {
                                    block.child('label').css({
                                        'min-width': '20px',
                                        'margin-right': '15px'
                                    });
                                }
                                :modified
                                    {
                                        
                                        data.locked = data.hasOwnProperty('locked') && (data.locked ? true : false);
                                        if (!data.locked) {
                                            app.music_settings.r_invert = block.key('state');
                                            app.sendRightInvert(app.music_settings.r_invert);
                                            if (app.music_settings.enabled) {
                                                setTimeout(function () {
                                                    app.playMusic();
                                                }, 75);
                                            }
                                        }
                                    }
                    block right-preamp
                        css
                            height 50px
                            padding-left 80px
                            padding-right 35px
                            box-sizing border-box
                            //border-bottom 1px solid #fafafa
                        #val
                            {
                                block.child('wrap/input').$().val(val);
                                block.child('wrap/value/text').html('').data("" + parseInt(val));
                            }
                        div wrap
                            css
                                height 30px
                                width auto
                            block label
                                css
                                    width auto
                                    height 30px
                                    float left
                                    margin-right 20px
                                text text
                                    val Pre-Amp
                                    css
                                        font-size 16px
                            input input
                                type range
                                min 20
                                max 200
                                value 100
                                css
                                    display block
                                    float left
                                    height 30px
                                    margin 0
                                    cursor pointer
                                    opacity 0.8
                                @query window width != 0
                                    {
                                        block.css('width', (block.parent().$().width() - 30 - block.sibling('label').$().width() - 70) + 'px');
                                    }
                                :input
                                    {
                                        var val = parseInt(block.$().val().trim());
                                        if (!isNaN(val)) {
                                            if (val < 1) val = 1;
                                            if (val > 200) val = 200;
                                            block.sibling('value').child('text').html('' + val);
                                            app.music_settings.r_preamp = val;
                                            app.sendRightPreamp(data.latent ? true : false);
                                        }
                                    }
                                :mouseup
                                    {
                                        block.on('input', { latent: true });
                                        if (app.music_settings.enabled) {
                                            setTimeout(function () {
                                                app.playMusic();
                                            }, 75);
                                        }
                                    }
                            block value
                                css
                                    width 30px
                                    height 30px
                                    float left
                                    margin-left 20px
                                text text
                                    val 1
                                    css
                                        font-size 18px
                    block right-postamp
                        css
                            height 50px
                            padding-left 80px
                            padding-right 35px
                            box-sizing border-box
                            //border-bottom 1px solid #fafafa
                        #val
                            {
                                block.child('wrap/input').$().val(val);
                                block.child('wrap/value/text').html('').data(val);
                            }
                        div wrap
                            css
                                height 30px
                                width auto
                            block label
                                css
                                    width auto
                                    height 30px
                                    float left
                                    margin-right 20px
                                text text
                                    val Post-Amp
                                    css
                                        font-size 16px
                            input input
                                type range
                                min 1
                                max 10
                                value 1
                                css
                                    display block
                                    float left
                                    height 30px
                                    margin 0
                                    cursor pointer
                                    opacity 0.8
                                @query window width != 0
                                    {
                                        block.css('width', (block.parent().$().width() - 30 - block.sibling('label').$().width() - 70) + 'px');
                                    }
                                :input
                                    {
                                        var val = parseInt(block.$().val().trim());
                                        if (!isNaN(val)) {
                                            if (val < 1) val = 1;
                                            if (val > 20) val = 20;
                                            block.sibling('value').child('text').html('' + val);
                                            app.music_settings.r_postamp = val;
                                            app.sendRightPostamp(data.latent ? true : false);
                                        }
                                    }
                                :mouseup
                                    {
                                        block.on('input', { latent: true });
                                        if (app.music_settings.enabled) {
                                            setTimeout(function () {
                                                app.playMusic();
                                            }, 75);
                                        }
                                    }
                            block value
                                css
                                    width 30px
                                    height 30px
                                    float left
                                    margin-left 20px
                                text text
                                    val 1
                                    css
                                        font-size 18px
                div editor
                    css
                        display none
                        position absolute
                        top 0
                        left 0
                        width 100%
                        height 100%
                    :show
                        {
                            var siblings = block.parent().children();
                            for (var s in siblings) {
                                if (s != block.mark()) siblings[s].css('display', 'none');
                            }
                            block.css('display', 'block');
                        }
                    #name
                        {
                            if (name.trim() != '') {
                                block.child('title/text').html('').data(name).sibling('input').$().val(name);
                                block.child('title/input').css('display', 'none').sibling('text').css('display', 'inline-block');
                            }
                        }
                    div title
                        css
                            text-align left
                            margin-top 15px
                            position relative
                            height 46px
                        text text
                            val pattern title
                            css
                                font-size 35px
                                color #444
                                position absolute
                                top 0
                                left 40px
                        input input
                            type text
                            css
                                font-size 35px
                                color #444
                                position absolute
                                top 0
                                left 40px
                                display none
                                outline none
                                border none
                                padding 0
                                margin 0
                            value pattern title
                            :keyup
                                {
                                    if (event.keyCode && event.keyCode == 13) {
                                        var val = block.$().val().trim();
                                        if (val != '') app.renamePattern(val);
                                    }
                                }
                        div delete
                            css
                                position absolute
                                right 30px
                                top 8px
                                opacity 0.65
                                cursor pointer
                                transition opacity 0.2s ease
                            image icon
                                src img/delete_b.png
                                height 35px
                                width 35px
                            :mouseover
                                css
                                    opacity 0.75
                            :mouseout
                                css
                                    opacity 0.65
                            :click
                                {
                                    app.deletePattern();
                                }
                        div edit
                            css
                                position absolute
                                right 75px
                                top 8px
                                opacity 0.65
                                cursor pointer
                                transition opacity 0.2s ease
                            image icon
                                src img/edit_b.png
                                height 35px
                                width 35px
                            :mouseover
                                css
                                    opacity 0.75
                            :mouseout
                                css
                                    opacity 0.65
                            :click
                                {
                                    block.sibling('text').css('display', 'none')
                                        .sibling('input').css('display', 'inline-block').$().focus().select();
                                }
                    hr hr1
                        css
                            width 20px
                            opacity 0.2
                            margin 3px 0 13px 39px
                        @query window height != 0
                            {
                                block.css('width', (block.parent().$().width() - 40 - 30 - 6) + 'px');
                            }
                    !pattern-color
                        init
                            {
                                var block = Block('div');
                                return block
                                    .css({
                                        width: '30px',
                                        marginLeft: '40px',
                                        height: '63px',
                                        marginBottom: '10px',
                                        borderRadius: '3px',
                                        backgroundColor: '#fdfdfd',
                                        boxShadow: '3px 2px 7px rgba(0,0,0,0.12)',
                                        transition: 'margin-left 0.1s ease, box-shadow 0.1s ease',
                                        border: '1px solid #f1f1f1'
                                    })
                                    .key('editcolor', false)
                                    .key('dragging', false)
                                    .query('window height != 0', function (event, block, data) {
                                        block.css('width', (block.parent().$().width() - 40 * 2) + 'px');
                                    })
                                    .add(Block('block', 'handle')
                                        .css({
                                            width: '70px',
                                            float: 'left'
                                        })
                                        .add(Block('div', 'imgwrap')
                                            .css({
                                                width: '32px',
                                                height: '32px',
                                                cursor: 'pointer',
                                                margin: '2px auto 0',
                                                opacity: '0.55',
                                                transition: 'opacity 0.1s ease, background-color 0.1s ease'
                                            })
                                            .on('mouseover', function (e, b, d) {
                                                b.css('opacity', '0.65');
                                            })
                                            .on('mouseout', function (e, b, d) {
                                                b.css('opacity', '0.55');
                                            })
                                            .on('mousedown', function (e, b, d) {
                                                console.log('dragging ' + block.key('id'));
                                                block.key('dragging', true);
                                                block.parent().key('draggingitem', block.key('id'));
                                                block.css({
                                                    boxShadow: '3px 4px 9px rgba(0,0,0,0.15)',
                                                    marginLeft: '60px',
                                                    backgroundColor: '#eee'
                                                });
                                            })
                                            .on('mouseup', function (e, b, d) {
                                                e.stopPropagation();
                                                console.log('released ' + block.key('id'));
                                                block.key('dragging', false);
                                                block.parent().key('draggingitem', -1);
                                                block.css({
                                                    boxShadow: '3px 2px 7px rgba(0,0,0,0.12)',
                                                    marginLeft: '40px',
                                                    backgroundColor: '#fdfdfd'
                                                });
                                                setTimeout(function () {
                                                    app.movePatternColor(block.key('id'), block.key('ordinalPos'));
                                                }, 100);
                                            })
                                            .add(Block('image', 1)
                                                .data({
                                                    src: 'img/bars3_b.png',
                                                    width: '32px',
                                                    height: '32px'
                                                })
                                            )
                                        )
                                    )
                                    .add(Block('block', 'fade')
                                        .css({
                                            width: '85px',
                                            height: '100%',
                                            float: 'left',
                                            marginRight: '15px'
                                        })
                                        .add(Block('div', 'wrapper')
                                            .css({
                                                width: '100%',
                                                height: '31px',
                                                textAlign: 'center',
                                                cursor: 'pointer'
                                            })
                                            .add(Block('text', 'text')
                                                .css({
                                                    fontSize: '23px',
                                                    width: 'auto',
                                                    color: '#333'
                                                })
                                                .class('select-disabled')
                                                .data('fade')
                                            )
                                            .add(Block('text', 'label')
                                                .css({
                                                    fontSize: '19px',
                                                    color: '#333'
                                                })
                                                .class('select-disabled')
                                                .data('ms')
                                            )
                                            .on('click', function (e, b, d) {
                                                e.stopPropagation();
                                                b.css('display', 'none').sibling('input').css('display', 'block').$().focus().select();
                                            })
                                        )
                                        .add(Block('input', 1)
                                            .data({
                                                type: 'text',
                                                placeholder: '10000'
                                            })
                                            .css({
                                                fontSize: '23px',
                                                width: '90%',
                                                textAlign: 'center',
                                                outline: 'none',
                                                border: 'none',
                                                backgroundColor: 'rgba(0, 0, 0, 0)',
                                                display: 'none',
                                                color: '#333'
                                            })
                                            .on('sendVal', function (e, b, d) {
                                                var val = b.$().val().trim();
                                                val = parseInt(val);
                                                if (!isNaN(val) && val >= 0 && val <= 30000) {
                                                    block.key('fade', val);
                                                    block.on('sendUpdate');
                                                }
                                            })
                                            .on('keyup', function (e, b, d) {
                                                if (e.keyCode == 13) {
                                                    b.on('sendVal');
                                                }
                                            })
                                            .on('click', function (e, b, d) {
                                                e.stopPropagation();
                                            })
                                        )
                                    )
                                    .add(Block('div', 'colorwrap')
                                        .css({
                                            float: 'left',
                                            borderLeft: '1px solid #f0f0f0',
                                            borderRight: '1px solid #f0f0f0',
                                            boxSizing: 'border-box',
                                            height: '100%'
                                        })
                                        .query('window height != 0', function (event, block, data) {
                                            block.css('width', (block.parent().$().width() - 100 * 2 - 3 * 2 - 70 * 2) + 'px');
                                        })
                                        .add(Block('block', 'color')
                                            .css({
                                                cursor: 'pointer',
                                                border: '3px solid black',
                                                boxSizing: 'border-box'
                                            })
                                            .add(Block('image', 'edit_img')
                                                .data({
                                                    src: 'img/edit_w.png',
                                                    height: '40px',
                                                    width: '40px',
                                                    css: {
                                                        margin: '0 auto',
                                                        display: 'none',
                                                        opacity: '0.9'
                                                    }
                                                })
                                            )
                                            .on('click', function (e, b, d) {
                                                e.stopPropagation();
                                                if (block.key('editcolor')) {
                                                    block.key('editcolor', false);
                                                    //b.css('border', '3px solid ' + app.util.rgbcss(block.key('r'), block.key('g'), block.key('b')));
                                                    b.child('edit_img').css('display', 'none');
                                                    app.trackPatternColorBlock = null;
                                                    block.on('sendUpdate');
                                                } else {
                                                    var prevent = false;
                                                    var siblings = block.parent().children();
                                                    for (var s in siblings) {
                                                        if (siblings.hasOwnProperty(s) && siblings[s].key('editcolor')) {
                                                            siblings[s].child('colorwrap/color').on('click');
                                                            prevent = true;
                                                        }
                                                    }
                                                    if (!prevent) {
                                                        block.key('editcolor', true);
                                                        //b.css('border', '3px solid #c3c3c3');
                                                        b.child('edit_img').css('display', 'block');
                                                        app.trackPatternColorBlock = block;
                                                    }
                                                }
                                            })
                                        )
                                    )
                                    .add(Block('block', 'time')
                                        .css({
                                            width: '100px',
                                            height: '100%',
                                            float: 'left',
                                            marginLeft: '10px'
                                        })
                                        .add(Block('div', 'wrapper')
                                            .css({
                                                width: '100%',
                                                height: '31px',
                                                textAlign: 'center',
                                                cursor: 'pointer'
                                            })
                                            .add(Block('text', 'text')
                                                .css({
                                                    fontSize: '23px',
                                                    width: 'auto',
                                                    color: '#333'
                                                })
                                                .class('select-disabled')
                                                .data('time')
                                            )
                                            .add(Block('text', 'label')
                                                .css({
                                                    fontSize: '19px',
                                                    color: '#333'
                                                })
                                                .class('select-disabled')
                                                .data('ms')
                                            )
                                            .on('click', function (e, b, d) {
                                                e.stopPropagation();
                                                b.css('display', 'none').sibling('input').css('display', 'block').$().focus().select();
                                            })
                                        )
                                        .add(Block('input', 1)
                                            .data({
                                                type: 'text',
                                                placeholder: '10000'
                                            })
                                            .css({
                                                fontSize: '23px',
                                                width: '90%',
                                                textAlign: 'center',
                                                outline: 'none',
                                                border: 'none',
                                                backgroundColor: 'rgba(0, 0, 0, 0)',
                                                display: 'none',
                                                color: '#333'
                                            })
                                            .on('sendVal', function (e, b, d) {
                                                var val = b.$().val().trim();
                                                val = parseInt(val);
                                                if (!isNaN(val) && val >= 0 && val <= 30000) {
                                                    block.key('time', val);
                                                    block.on('sendUpdate');
                                                }
                                            })
                                            .on('keyup', function (e, b, d) {
                                                if (e.keyCode == 13) {
                                                    b.on('sendVal');
                                                }
                                            })
                                            .on('click', function (e, b, d) {
                                                e.stopPropagation();
                                            })
                                        )
                                    )
                                    .add(Block('block', 'delete')
                                        .css({
                                            width: '55px',
                                            float: 'left',
                                            marginLeft: '5px'
                                        })
                                        .add(Block('div', 'imgwrap')
                                            .css({
                                                width: '23px',
                                                height: '23px',
                                                cursor: 'pointer',
                                                margin: '2px auto 0',
                                                opacity: '0.5',
                                                transition: 'opacity 0.1s ease'
                                            })
                                            .on('mouseover', function (e, b, d) {
                                                b.css('opacity', '0.6');
                                            })
                                            .on('mouseout', function (e, b, d) {
                                                b.css('opacity', '0.5');
                                            })
                                            .add(Block('image', 1)
                                                .data({
                                                    src: 'img/x_b.png',
                                                    width: '23px',
                                                    height: '23px'
                                                })
                                            )
                                        )
                                        .on('click', function (e, b, d) {
                                            app.deletePatternColor(block.key('id'));
                                        })
                                    )
                                    .on('sendUpdate', function (e, b, d) {
                                        app.updatePatternColor(block.key('id'), {
                                            fade: block.key('fade'),
                                            r: block.key('r'),
                                            g: block.key('g'),
                                            b: block.key('b'),
                                            time: block.key('time')
                                        });
                                    })
                                    .on('setOrdinalPos', function(e, b, d) {
                                        d.pos = parseInt(d.pos);
                                        // console.log('switching ' + block.key('ordinalPos') + ' to ' + d.pos);
                                        if (block.key('ordinalPos') != d.pos) {
                                            // console.log('moving ' + d.pos + ' to ' + block.key('ordinalPos'));
                                            var siblings = block.parent().children();
                                            for (var s in siblings) {
                                                if (siblings.hasOwnProperty(s) && siblings[s].key('ordinalPos') == d.pos) {
                                                    var sibling = siblings[s];
                                                    sibling.key('ordinalPos', block.key('ordinalPos'));
                                                    var stringpostemp = String(sibling.key('ordinalPos') + 1);
                                                    sibling.css({
                                                        '-webkit-box-ordinal-group': stringpostemp,
                                                        '-moz-box-ordinal-group': stringpostemp,
                                                        'box-ordinal-group': stringpostemp
                                                    });
                                                }
                                            }
                                        }
                                        block.key('ordinalPos', d.pos);
                                        var stringpos = String(d.pos + 1);
                                        block.css({
                                            '-webkit-box-ordinal-group': stringpos,
                                            '-moz-box-ordinal-group': stringpos,
                                            'box-ordinal-group': stringpos
                                        });
                                    })
                                ;
                            }
                        load
                            {
                                data('fade', function (fade) {
                                    block.key('fade', fade);
                                    block.child('fade/input').$().val(String(fade));
                                    block.child('fade/wrapper/text').html('').data(String(fade));
                                });
                                var rgbupdate = function () {
                                    var currentrgbcss = app.util.rgbcss(block.key('r'), block.key('g'), block.key('b'));
                                    block.child('colorwrap/color').css('background-color', currentrgbcss);
                                    //if (!block.key('editcolor'))
                                        block.child('colorwrap/color').css('border', '3px solid ' + currentrgbcss);
                                    if (block.key('r') > app.bwThreshold && block.key('g') > app.bwThreshold && block.key('b') > app.bwThreshold) {
                                        block.child('colorwrap/color/edit_img').data({
                                            src: 'img/edit_b.png'
                                        });
                                    } else {
                                        block.child('colorwrap/color/edit_img').data({
                                            src: 'img/edit_w.png'
                                        });
                                    }
                                }
                                data('r', function (r) {
                                    block.key('r', r);
                                    rgbupdate();
                                });
                                data('g', function (g) {
                                    block.key('g', g);
                                    rgbupdate();
                                });
                                data('b', function (b) {
                                    block.key('b', b);
                                    rgbupdate();
                                });
                                data('time', function (time) {
                                    block.key('time', time);
                                    block.child('time/input').$().val(String(time));
                                    block.child('time/wrapper/text').html('').data(String(time));
                                });
                                data('id', function (id) {
                                    block.key('id', id);
                                    block.on('setOrdinalPos', { pos: id });
                                });
                            }
                    div colors
                        class flexcontainer
                        css
                            width 100%
                            margin-bottom 5px
                            overflow scroll
                        {
                            block.key('draggingitem', -1);
                        }
                        @query window height != 0
                            {
                                block.css('height', (block.parent().$().height() - 15 - 46 - 6 - 2 - 85 - 5 - 10) + 'px');
                            }
                        #list
                            {
                                var children = block.children();
                                for (var c in children) {
                                    if (children.hasOwnProperty(c) && c != 'addbutton') {
                                        block.remove(c);
                                    }
                                }
                                var numcolors = 0;
                                for (var l in list) {
                                    block.add(Block('pattern-color', 'color_' + l), 'addbutton');
                                    block.child('color_' + l).data({ 'id': l }).data(list[l]);
                                    numcolors++;
                                }
                                numcolors++;
                                block.child('addbutton').css({
                                    '-webkit-box-ordinal-group': "" + numcolors,
                                    '-moz-box-ordinal-group': "" + numcolors,
                                    'box-ordinal-group': "" + numcolors
                                });
                                Block.queries();
                            }
                        block addbutton
                            css
                                height 64px
                                cursor pointer
                                background-color rgba(76, 76, 76, 0)
                                transition background-color 0.2s ease
                                text-align center
                                float left
                                opacity 0.8
                                margin 1px auto 40px 40px
                                border-radius 4px
                            @query window width != 0
                                {
                                    block.css('width', (block.parent().$().width() - 40 * 2) + 'px');
                                }
                            :mouseover
                                css
                                    background-color rgba(76, 76, 76, 0.1)
                            :mouseout
                                css
                                    background-color rgba(76, 76, 76, 0)
                            :mousedown
                                css
                                    background-color rgba(76, 76, 76, 0.2)
                            :mouseup
                                css
                                    background-color rgba(76, 76, 76, 0.1)
                            :click
                                {
                                    if (Object.keys(block.siblings()).length - 1 <= 10)
                                        app.addPatternColor();
                                }
                            image img
                                src img/plus_bl.png
                                height 30px
                                width 30px
                                css
                                    margin 0 auto
                    block playbutton
                        css
                            height 85px
                            cursor pointer
                            color white
                            border-left 1px solid #eee
                            transition background-color 0.2s ease, box-shadow 0.2s ease, -moz-box-shadow 0.2s ease, -webkit-box-shadow 0.2s ease
                            text-align center
                            float left
                            opacity 0.9
                        @query window height != 0
                            {
                                var inset = 'inset 0px 60px 0px -16px ' + app.colors[app.scheme].button['inset'];
                                block.css({
                                    backgroundColor: app.colors[app.scheme].button['default'],
                                    '-moz-box-shadow': inset, '-webkit-box-shadow': inset, 'box-shadow': inset
                                });
                            }
                        {
                            block.key('enabled', true);
                        }
                        :mouseover, mouseout, mousedown, mouseup
                            {
                                if (block.key('enabled')) block.css('background-color', app.colors[app.scheme].button[event.type]);
                            }
                        :click
                            {
                                if (block.key('enabled'))
                                    app.playPattern();
                            }
                        :enable
                            {
                                block.key('enabled', true);
                                block.css({
                                    'opacity': '0.9',
                                    'cursor': 'pointer'
                                });
                            }
                        :disable
                            {
                                block.key('enabled', false);
                                block.css({
                                    'opacity': '0.5',
                                    'cursor': 'default'
                                });
                            }
                        image img
                            src img/play_w.png
                            height 45px
                            width 45px
                            css
                                margin 0 auto
    :mousemove
        {
            var colors = block.child('controlpanel/patterns/area/editor/colors');
            var hlim = colors.$().height();
            if (colors.key('$hr') == null) colors.key('$hr', colors.sibling('hr1').$());
            if (colors.key('draggingitem') >= 0) {
                var pattern_color = colors.child('color_' + colors.key('draggingitem'));
                var $hr = colors.key('$hr');
                var pos = event.clientY - ($hr.offset().top + $hr.outerHeight(true));
                if (pos < 0) pos = -1000; if (pos > hlim) pos = hlim;
                pos /= pattern_color.$().outerHeight(true);
                pos = parseInt(pos);
                var numpatterncolors = Object.keys(colors.children()).length;
                if (pos >= numpatterncolors) pos = numpatterncolors - 1;
                if (pos < 0) pos = -1;
                pattern_color.on('setOrdinalPos', {
                    pos: pos
                });
            }
        }
    :mouseup
        {
            var colors = block.child('controlpanel/patterns/area/editor/colors');
            var children = colors.children();
            for (var c in children) {
                if (children.hasOwnProperty(c) && c != 'addbutton' && children[c].key('dragging'))
                    children[c].child('handle/imgwrap').on('mouseup');
            }
        }
    :click
        {
            var colors = block.child('controlpanel/patterns/area/editor/colors');
            var children = colors.children();
            for (var c in children) {
                if (children.hasOwnProperty(c) && c != 'addbutton') {
                    if (children[c].child('fade/input').css('display') == 'block') {
                        children[c].child('fade/input').on('sendVal');
                    }
                    if (children[c].child('time/input').css('display') == 'block') {
                        children[c].child('time/input').on('sendVal');
                    }
                }
            }
        }
    div hidden
        position fixed
        bottom -100px
        left -100px
        height 50px
        width 50px
        opacity 0
        display block
        z-index 0